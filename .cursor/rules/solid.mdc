---
description: 
globs: 
alwaysApply: true
---
# 🧱 Principios SOLID para refactorización y diseño de código

Cuando trabajes con este código, asegúrate de aplicar los principios SOLID:

1. **Single Responsibility Principle (SRP):**  
   Cada clase, función o módulo debe tener una única responsabilidad o motivo de cambio. Si algo hace más de una cosa, sepáralo.

2. **Open/Closed Principle (OCP):**  
   El código debe estar abierto para extensión pero cerrado para modificación. Usa la composición o herencia (si aplica) para permitir agregar funcionalidades sin tocar lo que ya funciona.

3. **Liskov Substitution Principle (LSP):**  
   Asegúrate de que las clases hijas puedan sustituir a sus clases padre sin alterar el comportamiento esperado del sistema.

4. **Interface Segregation Principle (ISP):**  
   No fuerces a los consumidores a depender de interfaces que no usan. Divide interfaces grandes en otras más pequeñas y específicas.

5. **Dependency Inversion Principle (DIP):**  
   Los módulos de alto nivel no deben depender de módulos de bajo nivel. Ambos deben depender de abstracciones (interfaces). Utiliza inyección de dependencias cuando sea posible.

**Reglas adicionales para aplicar:**
- Prefiere funciones puras y composición sobre herencia cuando sea posible.
- Nombra las clases y funciones de acuerdo a su responsabilidad específica.
- Si una función crece mucho o hace más de una cosa, divídela en funciones más pequeñas.
- Evita acoplamiento fuerte entre módulos; usa inyecciones, eventos o callbacks si es necesario.

Aplica estas reglas de forma proactiva al modificar, crear o refactorizar código.
