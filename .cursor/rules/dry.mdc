---
description: 
globs: 
alwaysApply: true
---
# ‚ôªÔ∏è Principio DRY (Don't Repeat Yourself)

Evita repetir c√≥digo o l√≥gica en m√∫ltiples lugares. Si detectas duplicaci√≥n, refactoriza para extraer esa l√≥gica en funciones reutilizables, hooks, utilidades o componentes.

### üîÅ ¬øQu√© considerar para aplicar DRY?

1. **Funciones repetidas:**
   Si ves bloques similares en diferentes funciones, unif√≠calos en una sola funci√≥n reutilizable.

2. **L√≥gica duplicada en clases o componentes:**
   Extrae m√©todos comunes a una clase base o crea un helper en un archivo compartido.

3. **C√≥digo similar en m√∫ltiples archivos:**
   Eval√∫a si se puede reutilizar creando un m√≥dulo o archivo compartido (`utils`, `hooks`, `services`, etc.).

4. **Validaciones repetidas:**
   Centraliza las validaciones en funciones √∫nicas. Ej: `validateEmail()`, `isEmpty()`, etc.

5. **Hooks duplicados en React:**
   Si dos componentes usan el mismo estado y efecto, crea un `custom hook`.

6. **Constantes o valores m√°gicos:**
   Declara valores compartidos (como strings, rutas, n√∫meros clave) en un solo archivo.

---

### ‚úÖ Buenas pr√°cticas para aplicar DRY:
- Refactoriza peque√±os bloques duplicados, no esperes a que el problema escale.
- Dale nombres claros y sem√°nticos a funciones reutilizadas.
- No sobreapliques DRY si la l√≥gica a√∫n no est√° madura. A veces es mejor duplicar primero y abstraer despu√©s.
- Usa el principio **"Abstrae cuando haya al menos 3 repeticiones"** como gu√≠a.

---

Aplica esta regla cada vez que copies y pegues c√≥digo, o veas patrones repetitivos en funciones, clases o componentes.
